(function () {
  "use strict";

  if (
    navigator.userAgent.match(/iPhone/i) ||
    navigator.userAgent.match(/iPad/i)
  ) {
    document.querySelector("html").classList.add("is-ios");
  }

  var shareLink = $(".sharer");
  $.each(shareLink, function () {
    var thisLink = $(this);
    if (!thisLink.attr("data-url")) {
      thisLink.attr("data-url", window.location.href);
    }
    if (!thisLink.attr("data-title")) {
      thisLink.attr("data-title", $(document).find("title").text());
    }
  });

  function closeAll() {
    document.documentElement.classList.remove("show-nav");
    document.documentElement.classList.remove("show-catalog");
  }

  var linkItems = $("#js-promoLinkItems");
  var promoLink = linkItems.find(".js-promoLink");

  $.each(promoLink, function () {
    var promoLinkCaption = $(this).find(".js-promoLinkCaption");

    $(this).on("mousemove", function (event) {
      var x = event.pageX + 20;
      var y = event.pageY;

      $(promoLinkCaption).css({
        left: x + "px",
        top: y + "px"
      });
    });
  });

  var tabs = $(".js-tabs");

  $.each(tabs, function () {
    var thisTabs = $(this);
    var tabsList = thisTabs.find(".js-tabsList");
    var tabsBtn = tabsList.find(".js-tabsBtn");

    var tabsItems = thisTabs.find(".js-tabsItems");
    var tabsItem = tabsItems.find(".js-tabsItem");
    var active = 0;

    $.each(tabsBtn, function (i) {
      var thisTab = tabsBtn.eq(i);
      var thisContent = tabsItem.eq(i);

      thisTab.on("click", function () {
        tabsBtn.removeClass("tabs__btn--active");
        $(this).addClass("tabs__btn--active");
        tabsItem.removeClass("tabs__item--active");
        thisContent.addClass("tabs__item--active");
      });
    });

    tabsBtn.eq(active).addClass("tabs__btn--active");
    tabsItem.eq(active).addClass("tabs__item--active");
  });

  var catalog = $("#js-catalog");

  if (catalog.length) {
    var catalogNav = catalog.find("#js-catalogNav");
    var catalogNavBtn = catalogNav.find(".js-catalogNavBtn");
    var catalogSections = catalog.find("#js-catalogSections");
    var catalogSection = catalogSections.find(".js-catalogSection");
    var catalogToggle = $(".js-catalogToggle");

    var closeCatalog = function () {
      if (window.matchMedia("(max-width: 767px)").matches) {
        catalogNavBtn.removeClass("catalog__nav-btn--active");
        catalogSection.removeClass("catalog__section--active");
      }
      document.documentElement.classList.remove("show-catalog");
    };

    var openCatalog = function () {
      if (window.matchMedia("(min-width: 768px)").matches) {
        $([document.documentElement, document.body]).animate(
          {
            scrollTop: 0
          },
          400
        );
      }
      closeAll();
      document.documentElement.classList.add("show-catalog");
    };

    catalogToggle.on("click", function () {
      if (
        document.documentElement.classList.contains("show-catalog") &&
        !document.documentElement.classList.contains("show-nav")
      ) {
        closeCatalog();
      } else {
        openCatalog();
      }
    });

    var catalogClose = $(".js-catalogClose");
    catalogClose.on("click", closeCatalog);

    if (window.matchMedia("(min-width: 768px)").matches) {
      catalogNavBtn.eq(0).addClass("catalog__nav-btn--active");
      catalogSection.eq(0).addClass("catalog__section--active");
    }

    function toggleCatalogSection(el) {
      const index = el.index();
      catalogNavBtn.removeClass("catalog__nav-btn--active");
      el.addClass("catalog__nav-btn--active");

      catalogSection.removeClass("catalog__section--active");
      catalogSection.eq(index).addClass("catalog__section--active");
    }

    catalogNavBtn.on("mouseenter", function () {
      if (window.matchMedia("(max-width: 767px)").matches) return;
      toggleCatalogSection($(this));
    });

    catalogNavBtn.on("click", function () {
      if (window.matchMedia("(min-width: 768px)").matches) return;
      toggleCatalogSection($(this));
    });

    $.each(catalogSection, function (i) {
      var section = $(this);
      var sectionClose = section.find(".js-catalogSectionClose");

      sectionClose.on("click", function () {
        if (window.matchMedia("(min-width: 768px)").matches) return;
        section.removeClass("catalog__section--active");
        catalogNavBtn.eq(0).removeClass("catalog__nav-btn--active");
      });
    });
  }

  var navToggle = $(".js-navToggle");
  navToggle.on("click", function () {
    document.documentElement.classList.toggle("show-nav");
  });

  var navClose = $(".js-navClose");
  navClose.on("click", function () {
    document.documentElement.classList.remove("show-nav");
  });

  var slider = $(".js-slider");
  $.each(slider, function (i) {
    var thisSlider = $(this);
    var sliderContainer = thisSlider.find(".swiper-container");
    var swiperPrev = thisSlider.find(".js-swiperPrev");
    var swiperNext = thisSlider.find(".js-swiperNext");

    var thumbs = thisSlider.find(".slider__swiper-mini");

    var options = {
      slidesPerView: 1,
      loop: false,
      spaceBetween: 0,
      speed: 500,
      navigation: {
        nextEl: swiperNext[0],
        prevEl: swiperPrev[0],
        disabledClass: "slider__arrow--disabled"
      },
      pagination: {
        el: ".swiper-pagination",
        type: "fraction"
      },
      on: {
        init: function () {
          if (this.length <= 1) {
            slider.addClass("slider--one-slide");
          }
        }
      },
      thumbs: thumbs.length
        ? {
            swiper: {
              el: thumbs[0],
              slidesPerView: "auto"
            }
          }
        : ""
    };

    new Swiper(sliderContainer[0], options);
  });

  var swiper = $(".js-swiper");
  $.each(swiper, function (i) {
    var thisSlider = $(this);
    var sliderContainer = thisSlider.find(".swiper-container");
    var swiperPrev = thisSlider.find(".js-swiperPrev");
    var swiperNext = thisSlider.find(".js-swiperNext");

    new Swiper(sliderContainer[0], {
      updateOnWindowResize: true,
      slidesPerView: "auto",
      loop: false,
      freeMode: true,
      mousewheel: false,
      preventClicks: true,
      observer: true,
      observeParents: true,
      spaceBetween: 0,
      speed: 500,
      grabCursor: true,
      touchReleaseOnEdges: true,
      touchMoveStopPropagation: true,
      slidesOffsetBefore: 0,
      slidesOffsetAfter: 0,
      //centeredSlides: true,
      navigation: {
        nextEl: swiperNext[0],
        prevEl: swiperPrev[0],
        disabledClass: "swiper__arrow--disabled"
      },
      breakpoints: {
        450: {
          freeMode: true
          //centeredSlides: false
        }
      }
    });
  });

  function createRange(range, callback) {
    var slider = range.find(".js-rangeSlider")[0],
      inputMin = range.find(".js-rangeMin")[0],
      inputMax = range.find(".js-rangeMax")[0],
      inputs = [inputMin, inputMax],
      min = slider.dataset.min ? parseFloat(slider.dataset.min) : 0,
      max = slider.dataset.max ? parseFloat(slider.dataset.max) : 100,
      minMax = [min, max],
      left = parseFloat(inputMin.value) || min,
      right = parseFloat(inputMax.value) || max,
      sliderStep = slider.dataset.step ? parseFloat(slider.dataset.step) : 1,
      sliderDecimals = slider.dataset.decimals
        ? parseInt(slider.dataset.decimals)
        : 0;

    inputMin.placeholder = min;
    inputMax.placeholder = max;

    if (callback)
      callback({
        name: range.attr("data-name"),
        inputMin: inputMin,
        inputMax: inputMax,
        min: min,
        max: max,
        left: left,
        right: right
      });

    var noLetters = function (input) {
      if (sliderDecimals == 0) {
        input.value = input.value.replace(/[^\d]+/g, "");
      } else {
        input.value = input.value
          .replace(/[^\d.]/g, "")
          .replace(/(\..*)\./g, "$1");
      }
    };

    inputMin.oninput = function () {
      noLetters(inputMin);
    };

    inputMax.oninput = function () {
      noLetters(inputMax);
    };

    noUiSlider.create(slider, {
      start: [left, right],
      connect: true,
      step: sliderStep,
      range: {
        min: min,
        max: max
      },
      format: wNumb({ decimals: sliderDecimals })
    });

    var counter = 0;
    slider.noUiSlider.on("update", function (values, handle) {
      inputs[handle].value =
        handle === counter && values[handle] == minMax[handle]
          ? ""
          : values[handle];
      counter += 1;
    });

    var setSliderHandle = function (i, value) {
      var r = [null, null];
      r[i] = value;
      slider.noUiSlider.set(r);
    };

    // Listen to keydown events on the input field.
    inputs.forEach(function (input, handle) {
      input.addEventListener("change", function () {
        setSliderHandle(handle, this.value);
      });

      input.addEventListener("keydown", function (e) {
        var values = slider.noUiSlider.get();
        var value = Number(values[handle]);

        // [[handle0_down, handle0_up], [handle1_down, handle1_up]]
        var steps = slider.noUiSlider.steps();

        // [down, up]
        var step = steps[handle];

        var position;

        // 13 is enter, 38 is key up, 40 is key down.
        switch (e.which) {
          case 13:
            setSliderHandle(handle, this.value);
            e.preventDefault();
            break;

          case 38:
            // Get step to go increase slider value (up)
            position = step[1];

            // false = no step is set
            if (position === false) {
              position = 1;
            }

            // null = edge of slider
            if (position !== null) {
              setSliderHandle(handle, value + position);
            }

            break;

          case 40:
            position = step[0];

            if (position === false) {
              position = 1;
            }

            if (position !== null) {
              setSliderHandle(handle, value - position);
            }
            break;
        }
      });
    });
  }

/*
  var range = $(".js-range");
  $.each(range, function (i) {
    createRange($(this));
  });

  var products = $("#js-products");
  if (products.length) {
    var categories = products.find("#js-categories");
    var categoriesToggle = categories.find(".js-categoriesToggle");

    categoriesToggle.on("click", function () {
      $(this).toggleClass("toggle-category");
    });

    var productsWrapper = products.find("#js-productsWrapper");
    var filter = products.find("#js-filter");
    if (filter.length) {
      var filterReset = filter.find("#js-filterReset");
      var filterResetHref = filterReset.attr("href");

      var filterOpen = products.find(".js-filterOpen");
      var filterClose = products.find(".js-filterClose");
      var filtersQty = products.find(".js-filtersQty");

      filterOpen.on("click", function () {
        document.documentElement.classList.add("show-filter");
      });

      filterClose.on("click", function () {
        document.documentElement.classList.remove("show-filter");
      });

      var filterSectionBtn = filter.find(".js-filterSectionBtn");

      filterSectionBtn.on("click", function () {
        $(this).toggleClass("toggle-filter");
      });

      var filtersCount = 0;

      var filtersArray = [];

      var showActiveFilters = function () {
        if (!filtersCount) return;

        filtersQty.text(filtersCount);
        filtersQty.show();

        var activeFilters = $(
          "<div class='active-filters products__active-filters'></div>"
        );
        activeFilters.append(
          "<a href='" +
            filterResetHref +
            "' class='active-filters__clear'>Сбросить все</a>"
        );

        filtersArray.forEach(function (item) {
          activeFilters.append(item);
        });

        productsWrapper.prepend(activeFilters);
      };

      var filterRange = filter.find(".js-filterRange");
      $.each(filterRange, function (i) {
        function filterRangeCallback(options) {
          if (options.min == options.left && options.max == options.right)
            return;
          filtersCount += 1;

          if (!options.name) return;

          var filterRangeClear = $(
            "<button type='button' class='active-filters__item'>" +
              options.name +
              ": " +
              options.left +
              " - " +
              options.right +
              "</button>"
          );
          filterRangeClear.on("click", function () {
            options.inputMin.value = "";
            options.inputMax.value = "";
            filter.submit();
          });

          filtersArray.push(filterRangeClear);
        }
        createRange($(this), filterRangeCallback);
      });

      var filterChecks = filter.find(".js-filterChecks");
      $.each(filterChecks, function (i) {
        var filterChecksName = $(this).attr("data-name");
        var filterCheck = $(this).find("input[type=checkbox]");
        var filterCheckReset = $(
          `
              <button type="button" class="filter__btn-reset">
                Сбросить
              </button>
            `
        );
        $(this).after(filterCheckReset);

        filterCheckReset.on("click", function () {
          filterCheck.prop("checked", false);
          filterCheck.trigger("change");
        });

        var filterChecked = filterCheck.filter(":checked");
        var filterCheckedLength = filterChecked.length;

        if (filterCheckedLength) {
          filtersCount += filterCheckedLength;
          filterCheckReset.show();

          if (filterChecksName) {
            var filterChecksClear = $(
              "<button type='button' class='active-filters__item'>" +
                filterChecksName +
                ": " +
                filterCheckedLength +
                " ызнач." +
                "</button>"
            );
            filterChecksClear.on("click", function () {
              filterCheck.prop("checked", false);
              filter.submit();
            });

            filtersArray.push(filterChecksClear);
          }
        }

        filterCheck.on("change", function () {
          var isChecked = filterCheck.is(":checked");
          console.log(isChecked);
          if (isChecked) {
            filterCheckReset.show();
          } else {
            filterCheckReset.hide();
          }
        });
      });

      showActiveFilters();
    }
  }
*/
var range = $(".js-range");
$.each(range, function (i) {
    createRange($(this));
});

var products = $("#js-products");
if (products.length) {
    var categories = products.find("#js-categories");
    var categoriesToggle = categories.find(".js-categoriesToggle");

    categoriesToggle.on("click", function () {
        $(this).toggleClass("toggle-category");
    });

    var productsWrapper = products.find("#js-productsWrapper");
    var filter = products.find("#js-filter");
    if (filter.length) {
        var filterOpen = products.find(".js-filterOpen");
        var filterClose = products.find(".js-filterClose");
        var filtersQty = products.find(".js-filtersQty");

        filterOpen.on("click", function () {
            document.documentElement.classList.add("show-filter");
        });

        filterClose.on("click", function () {
            document.documentElement.classList.remove("show-filter");
        });

        var filterSectionBtn = filter.find(".js-filterSectionBtn");

        filterSectionBtn.on("click", function () {
            $(this).toggleClass("toggle-filter");
        });

        var filtersCount = 0;
        var filtersArray = [];

        var showActiveFilters = function () {
            if (!filtersCount) return;

            filtersQty.text(filtersCount);
            filtersQty.show();

            var activeFilters = $("<div class='active-filters products__active-filters'></div>");

            var filterReset = $("<a href='#' class='active-filters__clear'>Сбросить все</a>");

            // Получаем текущий URL страницы
            var currentPageUrl = window.location.href;

            // Формируем URL для сброса фильтров
            var resetFilterUrl = currentPageUrl.split("?")[0]; // Отсекаем GET-параметры

            // Устанавливаем новый URL для кнопки "Сбросить все"
            filterReset.attr("href", resetFilterUrl);

            // Перезагружаем страницу без фильтров при клике на кнопку "Сбросить все"
            filterReset.on("click", function(event) {
                event.preventDefault();
                window.location.href = resetFilterUrl;
            });

            activeFilters.append(filterReset);

            filtersArray.forEach(function (item) {
                activeFilters.append(item);
            });

            productsWrapper.prepend(activeFilters);
        };

// Добавляем обработчик события на элементы active-filters__item
$(document).on("click", ".active-filters__item", function () {
    var index = $(this).index(); // Получаем индекс элемента в списке активных фильтров
    filtersArray.splice(index, 1); // Удаляем элемент из массива активных фильтров
    $(this).remove(); // Удаляем элемент из DOM
    filtersCount--; // Уменьшаем счетчик активных фильтров

    // Проверяем количество оставшихся свойств
    if (filtersCount === 0) {
        resetFilters(); // Если осталось 0 свойств, перезагружаем страницу без фильтров
    } else {
        // Иначе, инициируем клик на кнопке "Применить"
        $(".filter__submit.btn.btn--orange").click();
    }
});

// Функция для перезагрузки страницы без фильтров
function resetFilters() {
    var currentPageUrl = window.location.href;
    var resetFilterUrl = currentPageUrl.split("?")[0]; // Отсекаем GET-параметры
    window.location.href = resetFilterUrl;
}


















        var resetAllFiltersLink = $(".active-filters__clear");
        resetAllFiltersLink.on("click", function(event) {
            event.preventDefault();

            filter.find('input[type="radio"], input[type="checkbox"]').prop("checked", false);
            filter.find('input[type="text"]').val("");
            filter.submit();
        });

        var filterRange = filter.find(".js-filterRange");
        $.each(filterRange, function (i) {
            function filterRangeCallback(options) {
                if (options.min == options.left && options.max == options.right)
                    return;
                filtersCount += 1;

                if (!options.name) return;

                var filterRangeClear = $(
                    "<button type='button' class='active-filters__item'>" +
                    options.name +
                    ": " +
                    options.left +
                    " - " +
                    options.right +
                    "</button>"
                );
                filterRangeClear.on("click", function () {
                    options.inputMin.value = "";
                    options.inputMax.value = "";
                    filter.submit();
                });

                filtersArray.push(filterRangeClear);
            }
            createRange($(this), filterRangeCallback);
        });

        var filterChecks = filter.find(".js-filterChecks");
        $.each(filterChecks, function (i) {
            var filterChecksName = $(this).attr("data-name");
            var filterCheck = $(this).find("input[type=checkbox]");
            var filterCheckReset = $(
                `<button type="button" class="filter__btn-reset">Сбросить</button>`
            );
            $(this).after(filterCheckReset);

            filterCheckReset.on("click", function () {
                filterCheck.prop("checked", false);
                filterCheck.trigger("change");
            });

            var filterChecked = filterCheck.filter(":checked");
            var filterCheckedLength = filterChecked.length;

            if (filterCheckedLength) {
                filtersCount += filterCheckedLength;
                filterCheckReset.show();

                if (filterChecksName) {
                    var filterChecksClear = $(
                        "<button type='button' class='active-filters__item'>" +
                        filterChecksName +
                        ": " +
                        filterCheckedLength +
                        " знач." +
                        "</button>"
                    );
                    filterChecksClear.on("click", function () {
                        filterCheck.prop("checked", false);
                        filter.submit();
                    });

                    filtersArray.push(filterChecksClear);
                }
            }

            filterCheck.on("change", function () {
                var isChecked = filterCheck.is(":checked");
                if (isChecked) {
                    filterCheckReset.show();
                } else {
                    filterCheckReset.hide();
                }
            });
        });

        showActiveFilters();
    }
}










  $(document).on("keyup", function (e) {
    if (e.keyCode == 27) {
      closeAll();
    }
  });

  function wrapContent(el, wrapTag, wrapClass) {
    if (wrapClass && el.parentNode.classList.contains(wrapClass)) return;
    var wrapper = document.createElement(wrapTag);
    if (wrapClass) wrapper.className = wrapClass;

    el.parentNode.insertBefore(wrapper, el);
    wrapper.appendChild(el);

    if (el.tagName.toLowerCase() === "img" && el.alt) {
      var figcaption = document.createElement("figcaption");
      figcaption.innerHTML = el.alt;
      wrapper.appendChild(figcaption);
    }
  }

  var content = $(".content");

  $.each(content, function (i) {
    var thisContent = $(this);

    var iframe = thisContent.find("iframe");

    $.each(iframe, function (i) {
      wrapContent(this, "div", "adaptive-video");
    });

    var img = thisContent.find("img[alt]:not([align])");

    $.each(img, function (i) {
      if (this.alt) wrapContent(this, "figure");
    });
  });

  var body = $(document.body);
  var project = $("#js-project");
  
  if (project.length) {
    var btnRequest = project.find(".js-btnRequest");
    var ppRequest = $("#js-ppRequest");
    var ppBtnClose = ppRequest.find(".js-ppBtnClose");

    btnRequest.on("click", function () {
      ppRequest.addClass("pp--active");
      body.addClass("overflow");
    });

    ppBtnClose.on("click", function () {
      ppRequest.removeClass("pp--active");
      body.removeClass("overflow");
    });
  }

  var materialLinks = $("#js-materialLinks");

  if (materialLinks.length) {
    var link = materialLinks.find("a[href]");

    if (link.length < 4) return true;

    var hiddenLink = link.filter(function (i, item) {
      return $(item).is(":nth-child(n+4)");
    });

    var hiddenList = $(
      '<div class="review__hidden-list js-filterHiddenList"></div>'
    );
    hiddenList.append(hiddenLink);
    materialLinks.append(hiddenList);

    var btnMore = $(
      '<button class="review__btn-more btn js-btnMore" type="button">' +
        "Показать ещё" +
        "</button>"
    );

    materialLinks.append(btnMore);

    btnMore.on("click", function () {
      materialLinks.append(hiddenLink);
      $(this).remove();
    });
  }

  var dropDown = $("#js-dropDown");
  var dropDownItem = dropDown.find(".drop-down__item");

  $.each(dropDownItem, function () {
    var dropDownTopContent = $(this).find(".drop-down__item-content");

    $(this).on("click", function () {
      $(this).toggleClass('drop-down__item--active');
      dropDownTopContent.slideToggle();
    });
  });
   
})();
